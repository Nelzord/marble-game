local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Create the shop GUI
local shopGui = Instance.new("ScreenGui")
shopGui.Name = "ShopGUI"
shopGui.ResetOnSpawn = false
shopGui.Parent = playerGui

-- Main frame (larger size)
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 800, 0, 500)
mainFrame.Position = UDim2.new(0.5, -400, 0.5, -250)
mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = shopGui

-- Corner radius
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 12)
corner.Parent = mainFrame

-- Title
local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "TitleLabel"
titleLabel.Size = UDim2.new(1, 0, 0, 60)
titleLabel.Position = UDim2.new(0, 0, 0, 0)
titleLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
titleLabel.BorderSizePixel = 0
titleLabel.Text = "SHOP"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.TextScaled = true
titleLabel.Font = Enum.Font.GothamBold
titleLabel.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 12)
titleCorner.Parent = titleLabel

-- Close button
local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 40, 0, 40)
closeButton.Position = UDim2.new(1, -50, 0, 10)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
closeButton.BorderSizePixel = 0
closeButton.Text = "X"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextScaled = true
closeButton.Font = Enum.Font.GothamBold
closeButton.Parent = titleLabel

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 8)
closeCorner.Parent = closeButton

-- Tab container
local tabContainer = Instance.new("Frame")
tabContainer.Name = "TabContainer"
tabContainer.Size = UDim2.new(1, -40, 0, 50)
tabContainer.Position = UDim2.new(0, 20, 0, 80)
tabContainer.BackgroundTransparency = 1
tabContainer.Parent = mainFrame

-- Add UIListLayout for proper tab distribution
local tabListLayout = Instance.new("UIListLayout")
tabListLayout.FillDirection = Enum.FillDirection.Horizontal
tabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
tabListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
tabListLayout.Padding = UDim.new(0, 5) -- 5 pixel spacing between tabs
tabListLayout.Parent = tabContainer

-- Gamepasses Tab (First)
local gamepassesTab = Instance.new("TextButton")
gamepassesTab.Name = "GamepassesTab"
gamepassesTab.Size = UDim2.new(0.33, -4, 0, 40) -- 1/3 width minus padding
gamepassesTab.BackgroundColor3 = Color3.fromRGB(100, 200, 255) -- Blue for gamepasses (active by default)
gamepassesTab.BorderSizePixel = 0
gamepassesTab.Text = "GAMEPASSES"
gamepassesTab.TextColor3 = Color3.fromRGB(255, 255, 255)
gamepassesTab.TextScaled = true
gamepassesTab.Font = Enum.Font.GothamBold
gamepassesTab.LayoutOrder = 1
gamepassesTab.Parent = tabContainer

local gamepassesTabCorner = Instance.new("UICorner")
gamepassesTabCorner.CornerRadius = UDim.new(0, 8)
gamepassesTabCorner.Parent = gamepassesTab

-- Special Shop Tab (Second)
local specialTab = Instance.new("TextButton")
specialTab.Name = "SpecialTab"
specialTab.Size = UDim2.new(0.33, -4, 0, 40) -- 1/3 width minus padding
specialTab.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Gray for Robux
specialTab.BorderSizePixel = 0
specialTab.Text = "SPECIAL SHOP"
specialTab.TextColor3 = Color3.fromRGB(255, 255, 255)
specialTab.TextScaled = true
specialTab.Font = Enum.Font.GothamBold
specialTab.LayoutOrder = 2
specialTab.Parent = tabContainer

local specialTabCorner = Instance.new("UICorner")
specialTabCorner.CornerRadius = UDim.new(0, 8)
specialTabCorner.Parent = specialTab

-- Coin Shop Tab (Third)
local coinTab = Instance.new("TextButton")
coinTab.Name = "CoinTab"
coinTab.Size = UDim2.new(0.33, -4, 0, 40) -- 1/3 width minus padding
coinTab.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Gray for coin shop
coinTab.BorderSizePixel = 0
coinTab.Text = "COIN SHOP"
coinTab.TextColor3 = Color3.fromRGB(255, 255, 255)
coinTab.TextScaled = true
coinTab.Font = Enum.Font.GothamBold
coinTab.LayoutOrder = 3
coinTab.Parent = tabContainer

local coinTabCorner = Instance.new("UICorner")
coinTabCorner.CornerRadius = UDim.new(0, 8)
coinTabCorner.Parent = coinTab

-- Content area
local contentFrame = Instance.new("Frame")
contentFrame.Name = "ContentFrame"
contentFrame.Size = UDim2.new(1, -40, 1, -150)
contentFrame.Position = UDim2.new(0, 20, 0, 150)
contentFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
contentFrame.BorderSizePixel = 0
contentFrame.Parent = mainFrame

local contentCorner = Instance.new("UICorner")
contentCorner.CornerRadius = UDim.new(0, 8)
contentCorner.Parent = contentFrame

-- Gamepasses Content (First)
local gamepassesContent = Instance.new("Frame")
gamepassesContent.Name = "GamepassesContent"
gamepassesContent.Size = UDim2.new(1, 0, 1, 0)
gamepassesContent.BackgroundTransparency = 1
gamepassesContent.Parent = contentFrame

-- Gamepasses title
local gamepassesTitle = Instance.new("TextLabel")
gamepassesTitle.Name = "GamepassesTitle"
gamepassesTitle.Size = UDim2.new(1, 0, 0, 50)
gamepassesTitle.Position = UDim2.new(0, 0, 0, 20)
gamepassesTitle.BackgroundTransparency = 1
gamepassesTitle.Text = "Gamepasses"
gamepassesTitle.TextColor3 = Color3.fromRGB(100, 200, 255)
gamepassesTitle.TextScaled = true
gamepassesTitle.Font = Enum.Font.GothamBold
gamepassesTitle.Parent = gamepassesContent

-- Gamepasses items container
local gamepassesItemsContainer = Instance.new("ScrollingFrame")
gamepassesItemsContainer.Name = "GamepassesItemsContainer"
gamepassesItemsContainer.Size = UDim2.new(1, -40, 1, -100)
gamepassesItemsContainer.Position = UDim2.new(0, 20, 0, 80)
gamepassesItemsContainer.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
gamepassesItemsContainer.BorderSizePixel = 0
gamepassesItemsContainer.ScrollBarThickness = 6
gamepassesItemsContainer.Parent = gamepassesContent

local gamepassesItemsCorner = Instance.new("UICorner")
gamepassesItemsCorner.CornerRadius = UDim.new(0, 6)
gamepassesItemsCorner.Parent = gamepassesItemsContainer

-- Gamepasses grid layout
local gamepassesGridLayout = Instance.new("UIGridLayout")
gamepassesGridLayout.CellSize = UDim2.new(0, 150, 0, 200)
gamepassesGridLayout.CellPadding = UDim2.new(0, 10, 0, 10)
gamepassesGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
gamepassesGridLayout.Parent = gamepassesItemsContainer

-- Coin Shop Content
local coinContent = Instance.new("Frame")
coinContent.Name = "CoinContent"
coinContent.Size = UDim2.new(1, 0, 1, 0)
coinContent.BackgroundTransparency = 1
coinContent.Visible = false
coinContent.Parent = contentFrame

-- Coin shop title
local coinTitle = Instance.new("TextLabel")
coinTitle.Name = "CoinTitle"
coinTitle.Size = UDim2.new(1, 0, 0, 50)
coinTitle.Position = UDim2.new(0, 0, 0, 20)
coinTitle.BackgroundTransparency = 1
coinTitle.Text = "Regular Items"
coinTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
coinTitle.TextScaled = true
coinTitle.Font = Enum.Font.GothamBold
coinTitle.Parent = coinContent

-- Luck display
local luckDisplay = Instance.new("TextLabel")
luckDisplay.Name = "LuckDisplay"
luckDisplay.Size = UDim2.new(1, -20, 0, 30)
luckDisplay.Position = UDim2.new(0, 10, 0, 70)
luckDisplay.BackgroundColor3 = Color3.fromRGB(100, 50, 150)
luckDisplay.BorderSizePixel = 0
luckDisplay.Text = "Current Luck: 1.0x"
luckDisplay.TextColor3 = Color3.fromRGB(255, 255, 255)
luckDisplay.TextScaled = true
luckDisplay.Font = Enum.Font.GothamBold
luckDisplay.Parent = coinContent

local luckCorner = Instance.new("UICorner")
luckCorner.CornerRadius = UDim.new(0, 6)
luckCorner.Parent = luckDisplay

-- Coin shop items container
local coinItemsContainer = Instance.new("ScrollingFrame")
coinItemsContainer.Name = "CoinItemsContainer"
coinItemsContainer.Size = UDim2.new(1, -40, 1, -130)
coinItemsContainer.Position = UDim2.new(0, 20, 0, 110)
coinItemsContainer.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
coinItemsContainer.BorderSizePixel = 0
coinItemsContainer.ScrollBarThickness = 6
coinItemsContainer.Parent = coinContent

local coinItemsCorner = Instance.new("UICorner")
coinItemsCorner.CornerRadius = UDim.new(0, 6)
coinItemsCorner.Parent = coinItemsContainer

-- Coin shop grid layout
local coinGridLayout = Instance.new("UIGridLayout")
coinGridLayout.CellSize = UDim2.new(0, 150, 0, 200)
coinGridLayout.CellPadding = UDim2.new(0, 10, 0, 10)
coinGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
coinGridLayout.Parent = coinItemsContainer

-- Special Shop Content (Second)
local specialContent = Instance.new("Frame")
specialContent.Name = "SpecialContent"
specialContent.Size = UDim2.new(1, 0, 1, 0)
specialContent.BackgroundTransparency = 1
specialContent.Visible = false
specialContent.Parent = contentFrame

-- Special shop title
local specialTitle = Instance.new("TextLabel")
specialTitle.Name = "SpecialTitle"
specialTitle.Size = UDim2.new(1, 0, 0, 50)
specialTitle.Position = UDim2.new(0, 0, 0, 20)
specialTitle.BackgroundTransparency = 1
specialTitle.Text = "Premium Items"
specialTitle.TextColor3 = Color3.fromRGB(255, 215, 0)
specialTitle.TextScaled = true
specialTitle.Font = Enum.Font.GothamBold
specialTitle.Parent = specialContent

-- Special shop items container
local specialItemsContainer = Instance.new("ScrollingFrame")
specialItemsContainer.Name = "SpecialItemsContainer"
specialItemsContainer.Size = UDim2.new(1, -40, 1, -100)
specialItemsContainer.Position = UDim2.new(0, 20, 0, 80)
specialItemsContainer.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
specialItemsContainer.BorderSizePixel = 0
specialItemsContainer.ScrollBarThickness = 6
specialItemsContainer.Parent = specialContent

local specialItemsCorner = Instance.new("UICorner")
specialItemsCorner.CornerRadius = UDim.new(0, 6)
specialItemsCorner.Parent = specialItemsContainer

-- Special shop grid layout
local specialGridLayout = Instance.new("UIGridLayout")
specialGridLayout.CellSize = UDim2.new(0, 150, 0, 200)
specialGridLayout.CellPadding = UDim2.new(0, 10, 0, 10)
specialGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
specialGridLayout.Parent = specialItemsContainer

-- Initially hide the GUI
shopGui.Enabled = false

-- Store update functions for shop items
local robuxUpdateFunctions = {}
local coinUpdateFunctions = {}
local gamepassesUpdateFunctions = {}

-- Current coin count
local currentCoins = 0
-- Store globally so buy buttons can access it
_G.currentCoins = 0

-- Function to create shop item UI
local function createShopItem(item, container, isRobuxItem)
    local itemFrame = Instance.new("Frame")
    itemFrame.Name = "ItemFrame_" .. item.name
    itemFrame.Size = UDim2.new(0, 150, 0, 200) -- Fixed size for grid
    itemFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    itemFrame.BorderSizePixel = 0
    itemFrame.Parent = container
    
    local itemCorner = Instance.new("UICorner")
    itemCorner.CornerRadius = UDim.new(0, 8)
    itemCorner.Parent = itemFrame
    
    -- Image placeholder
    local imagePlaceholder = Instance.new("Frame")
    imagePlaceholder.Name = "ImagePlaceholder"
    imagePlaceholder.Size = UDim2.new(1, -10, 0, 100)
    imagePlaceholder.Position = UDim2.new(0, 5, 0, 5)
    imagePlaceholder.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    imagePlaceholder.BorderSizePixel = 0
    imagePlaceholder.Parent = itemFrame
    
    local imageCorner = Instance.new("UICorner")
    imageCorner.CornerRadius = UDim.new(0, 6)
    imageCorner.Parent = imagePlaceholder
    
    -- Item image
    local itemImage = Instance.new("ImageLabel")
    itemImage.Name = "ItemImage"
    itemImage.Size = UDim2.new(1, 0, 1, 0)
    itemImage.Position = UDim2.new(0, 0, 0, 0)
    itemImage.BackgroundTransparency = 1
    itemImage.ScaleType = Enum.ScaleType.Fit
    itemImage.Parent = imagePlaceholder
    
    -- Set specific images based on item type
    if item.itemType == "nuke_all" then
        itemImage.Image = "rbxassetid://115934412352825"
    elseif item.itemType == "permanent_luck" then
        itemImage.Image = "rbxassetid://80819026897805"
    elseif item.itemType == "lucky_potion" then
        -- Set image based on luck multiplier
        if item.luckMultiplier == 1.25 then
            itemImage.Image = "rbxassetid://81477674576659"
        elseif item.luckMultiplier == 1.5 then
            itemImage.Image = "rbxassetid://104597457196107"
        elseif item.luckMultiplier == 2 then
            itemImage.Image = "rbxassetid://89877824960542"
        else
            -- Default placeholder for unknown luck multipliers
            local placeholderText = Instance.new("TextLabel")
            placeholderText.Name = "PlaceholderText"
            placeholderText.Size = UDim2.new(1, 0, 1, 0)
            placeholderText.Position = UDim2.new(0, 0, 0, 0)
            placeholderText.BackgroundTransparency = 1
            placeholderText.Text = "IMAGE"
            placeholderText.TextColor3 = Color3.fromRGB(150, 150, 150)
            placeholderText.TextScaled = true
            placeholderText.Font = Enum.Font.Gotham
            placeholderText.Parent = imagePlaceholder
        end
    else
        -- Default placeholder for other items
        local placeholderText = Instance.new("TextLabel")
        placeholderText.Name = "PlaceholderText"
        placeholderText.Size = UDim2.new(1, 0, 1, 0)
        placeholderText.Position = UDim2.new(0, 0, 0, 0)
        placeholderText.BackgroundTransparency = 1
        placeholderText.Text = "IMAGE"
        placeholderText.TextColor3 = Color3.fromRGB(150, 150, 150)
        placeholderText.TextScaled = true
        placeholderText.Font = Enum.Font.Gotham
        placeholderText.Parent = imagePlaceholder
    end
    
    -- Item name
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "NameLabel"
    nameLabel.Size = UDim2.new(1, -10, 0, 30)
    nameLabel.Position = UDim2.new(0, 5, 0, 110)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = item.name
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.TextScaled = true
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextXAlignment = Enum.TextXAlignment.Center
    nameLabel.Parent = itemFrame
    
    -- Price label
    local priceLabel = Instance.new("TextLabel")
    priceLabel.Name = "PriceLabel"
    priceLabel.Size = UDim2.new(1, -10, 0, 25)
    priceLabel.Position = UDim2.new(0, 5, 0, 145)
    priceLabel.BackgroundTransparency = 1
    priceLabel.Text = item.price .. (isRobuxItem and " Robux" or " Coins")
    priceLabel.TextColor3 = isRobuxItem and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(255, 215, 0)
    priceLabel.TextScaled = true
    priceLabel.Font = Enum.Font.GothamBold
    priceLabel.TextXAlignment = Enum.TextXAlignment.Center
    priceLabel.Parent = itemFrame
    
    -- Buy button
    local buyButton = Instance.new("TextButton")
    buyButton.Name = "BuyButton"
    buyButton.Size = UDim2.new(1, -10, 0, 30)
    buyButton.Position = UDim2.new(0, 5, 0, 175)
    buyButton.BackgroundColor3 = isRobuxItem and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(0, 150, 0)
    buyButton.BorderSizePixel = 0
    buyButton.Text = isRobuxItem and "BUY (R$)" or "BUY"
    buyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    buyButton.TextScaled = true
    buyButton.Font = Enum.Font.GothamBold
    buyButton.Parent = itemFrame
    
    local buyCorner = Instance.new("UICorner")
    buyCorner.CornerRadius = UDim.new(0, 6)
    buyCorner.Parent = buyButton
    
    -- Update button state based on affordability and ownership
    local function updateButtonState()
        if isRobuxItem then
            -- Check if player owns permanent luck (for permanent_luck item)
            if item.itemType == "permanent_luck" and _G.playerPermanentLuckBonus and _G.playerPermanentLuckBonus >= 2 then
                buyButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
                buyButton.Text = "OWNED"
                buyButton.Active = false
            else
                -- For other Robux items, always show as purchasable
                buyButton.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
                buyButton.Text = "BUY (R$)"
                buyButton.Active = true
            end
        else
            -- For coin items, check if player has enough coins
            local currentCoinCount = _G.currentCoins or currentCoins
            if currentCoinCount >= item.price then
                buyButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
                buyButton.Text = "BUY"
                buyButton.Active = true
            else
                buyButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
                buyButton.Text = "NO COINS"
                buyButton.Active = false
            end
        end
    end
    
    -- Buy button functionality
    buyButton.MouseButton1Click:Connect(function()
        print("Buy button clicked for item:", item.name, "Type:", item.itemType, "IsRobux:", isRobuxItem)
        print("Current coins at purchase time:", currentCoins)
        
        if isRobuxItem then
            -- Don't allow purchase if already owned (for permanent_luck)
            if item.itemType == "permanent_luck" and _G.playerPermanentLuckBonus and _G.playerPermanentLuckBonus >= 2 then
                print("Item already owned, purchase blocked")
                return
            end
            
            -- For Robux items, trigger the purchase
            print("Attempting Robux purchase for:", item.itemType)
            local remotesFolder = ReplicatedStorage:FindFirstChild("Remotes")
            if remotesFolder then
                local robuxPurchase = remotesFolder:FindFirstChild("RobuxPurchase")
                if robuxPurchase then
                    print("Firing RobuxPurchase remote event for:", item.itemType)
                    robuxPurchase:FireServer(item.itemType)
                else
                    print("RobuxPurchase remote event not found")
                end
            else
                print("Remotes folder not found")
            end
        else
            -- For coin items, check if player has enough coins
            -- Use the global currentCoins variable, not the captured one
            local currentCoinCount = _G.currentCoins or currentCoins
            print("Coin purchase attempt. Current coins:", currentCoinCount, "Required:", item.price)
            if currentCoinCount >= item.price then
                -- Trigger coin purchase
                local remotesFolder = ReplicatedStorage:FindFirstChild("Remotes")
                if remotesFolder then
                    local shopPurchase = remotesFolder:FindFirstChild("ShopPurchase")
                    if shopPurchase then
                        print("Firing ShopPurchase remote event for:", item.name)
                        shopPurchase:FireServer(item.name)
                    else
                        print("ShopPurchase remote event not found")
                    end
                else
                    print("Remotes folder not found")
                end
            else
                print("Not enough coins for purchase")
            end
        end
    end)
    
    -- Return update function
    return updateButtonState
end

-- Function to populate Robux shop items
local function populateRobuxShopItems()
    -- Clear existing items
    for _, child in pairs(specialItemsContainer:GetChildren()) do
        if child:IsA("Frame") and child.Name:find("ItemFrame_") then
            child:Destroy()
        end
    end
    
    -- Clear update functions
    robuxUpdateFunctions = {}
    
    -- Robux shop items
    local robuxItems = {
        {
            name = "Nuke All",
            price = 100,
            description = "Instantly kill everyone including yourself with a massive explosion! (One-time use)",
            itemType = "nuke_all"
        }
    }
    
    -- Create items
    for i, item in ipairs(robuxItems) do
        local updateFunc = createShopItem(item, specialItemsContainer, true)
        table.insert(robuxUpdateFunctions, updateFunc)
    end
    
    -- Update container size based on grid layout
    local function updateCanvasSize()
        local gridSize = specialGridLayout.AbsoluteContentSize
        specialItemsContainer.CanvasSize = UDim2.new(0, 0, 0, gridSize.Y + 20)
    end
    
    -- Connect to grid layout changes
    specialGridLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvasSize)
    updateCanvasSize()
end

-- Function to populate coin shop items
local function populateCoinShopItems()
    -- Clear existing items
    for _, child in pairs(coinItemsContainer:GetChildren()) do
        if child:IsA("Frame") and child.Name:find("ItemFrame_") then
            child:Destroy()
        end
    end
    
    -- Clear update functions
    coinUpdateFunctions = {}
    
    -- Get shop items from server (for now, we'll use hardcoded items)
    local shopItems = {
        {
            name = "Lucky Potion (1.25x)",
            price = 50,
            description = "Increases luck by 1.25x for 5 minutes",
            itemType = "lucky_potion",
            luckMultiplier = 1.25
        },
        {
            name = "Lucky Potion (1.5x)",
            price = 75,
            description = "Increases luck by 1.5x for 5 minutes",
            itemType = "lucky_potion",
            luckMultiplier = 1.5
        },
        {
            name = "Lucky Potion (2x)",
            price = 100,
            description = "Increases luck by 2x for 5 minutes",
            itemType = "lucky_potion",
            luckMultiplier = 2
        }
    }
    
    -- Create items
    for i, item in ipairs(shopItems) do
        local updateFunc = createShopItem(item, coinItemsContainer, false)
        table.insert(coinUpdateFunctions, updateFunc)
    end
    
    -- Update container size based on grid layout
    local function updateCanvasSize()
        local gridSize = coinGridLayout.AbsoluteContentSize
        coinItemsContainer.CanvasSize = UDim2.new(0, 0, 0, gridSize.Y + 20)
    end
    
    -- Connect to grid layout changes
    coinGridLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvasSize)
    updateCanvasSize()
end

-- Function to populate gamepasses items
local function populateGamepassesItems()
    -- Clear existing items
    for _, child in pairs(gamepassesItemsContainer:GetChildren()) do
        if child:IsA("Frame") and child.Name:find("ItemFrame_") then
            child:Destroy()
        end
    end
    
    -- Clear update functions
    gamepassesUpdateFunctions = {}
    
    -- Gamepasses items
    local gamepassesItems = {
        {
            name = "Permanent 2x Luck",
            price = 200,
            description = "Permanent 2x luck bonus (applies to all potions)",
            itemType = "permanent_luck"
        }
    }
    
    -- Create items
    for i, item in ipairs(gamepassesItems) do
        local updateFunc = createShopItem(item, gamepassesItemsContainer, true) -- Use Robux styling for gamepasses
        table.insert(gamepassesUpdateFunctions, updateFunc)
    end
    
    -- Update container size based on grid layout
    local function updateCanvasSize()
        local gridSize = gamepassesGridLayout.AbsoluteContentSize
        gamepassesItemsContainer.CanvasSize = UDim2.new(0, 0, 0, gridSize.Y + 20)
    end
    
    -- Connect to grid layout changes
    gamepassesGridLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvasSize)
    updateCanvasSize()
end

-- Function to switch tabs
local function switchToTab(tabName)
    -- Hide all content
    gamepassesContent.Visible = false
    specialContent.Visible = false
    coinContent.Visible = false
    
    -- Reset all tab colors
    gamepassesTab.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    specialTab.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    coinTab.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    
    if tabName == "gamepasses" then
        gamepassesContent.Visible = true
        gamepassesTab.BackgroundColor3 = Color3.fromRGB(100, 200, 255)
    elseif tabName == "special" then
        specialContent.Visible = true
        specialTab.BackgroundColor3 = Color3.fromRGB(255, 215, 0)
    elseif tabName == "coin" then
        coinContent.Visible = true
        coinTab.BackgroundColor3 = Color3.fromRGB(255, 215, 0)
    end
end

-- Function to show/hide shop
local function toggleShop(show)
    shopGui.Enabled = show
    if show then
        print("Shop opened. Current coins:", currentCoins)
        -- Request current coin count from server
        local remotesFolder = ReplicatedStorage:FindFirstChild("Remotes")
        if remotesFolder then
            local requestCoins = remotesFolder:FindFirstChild("RequestCoins")
            if requestCoins then
                print("Requesting current coin count from server")
                requestCoins:FireServer()
            else
                print("RequestCoins remote event not found, using current value")
            end
        end
        -- When opening the shop, populate the default tab (gamepasses)
        populateGamepassesItems()
        -- Make sure gamepasses tab is active
        switchToTab("gamepasses")
    end
end

-- Tab button functionality
specialTab.MouseButton1Click:Connect(function()
    switchToTab("special")
end)

coinTab.MouseButton1Click:Connect(function()
    switchToTab("coin")
end)

gamepassesTab.MouseButton1Click:Connect(function()
    switchToTab("gamepasses")
end)

-- Close button functionality
closeButton.MouseButton1Click:Connect(function()
    toggleShop(false)
end)

-- Variables for shop functionality
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Wait for remotes
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local coinCountUpdate = remotes:WaitForChild("CoinCountUpdate")

-- Create shop purchase remote if it doesn't exist
local shopPurchase
if remotes:FindFirstChild("ShopPurchase") then
    shopPurchase = remotes:FindFirstChild("ShopPurchase")
else
    shopPurchase = Instance.new("RemoteEvent")
    shopPurchase.Name = "ShopPurchase"
    shopPurchase.Parent = remotes
end

-- Create luck update remote if it doesn't exist
local luckUpdate
if remotes:FindFirstChild("LuckUpdate") then
    luckUpdate = remotes:FindFirstChild("LuckUpdate")
else
    luckUpdate = Instance.new("RemoteEvent")
    luckUpdate.Name = "LuckUpdate"
    luckUpdate.Parent = remotes
end

-- Current coin count
local currentCoins = 0


-- Function to update all shop items
local function updateAllShopItems()
    -- Update Robux shop items
    for _, updateFunc in pairs(robuxUpdateFunctions) do
        if updateFunc then
            updateFunc()
        end
    end
    
    -- Update coin shop items
    for _, updateFunc in pairs(coinUpdateFunctions) do
        if updateFunc then
            updateFunc()
        end
    end
    
    -- Update gamepasses items
    for _, updateFunc in pairs(gamepassesUpdateFunctions) do
        if updateFunc then
            updateFunc()
        end
    end
end

-- Make updateAllShopItems globally accessible
_G.updateAllShopItems = updateAllShopItems


-- Function to update coin count
local function updateCoinCount(coinCount)
    print("Coin count updated:", coinCount)
    currentCoins = coinCount
    -- Store globally so buy buttons can access it
    _G.currentCoins = coinCount
    -- Update all shop items
    updateAllShopItems()
    
    -- If shop is open, refresh the currently visible tab
    if shopGui.Enabled then
        print("Shop is open, refreshing current tab with new coin count")
        if gamepassesContent.Visible then
            populateGamepassesItems()
        elseif specialContent.Visible then
            populateRobuxShopItems()
        elseif coinContent.Visible then
            populateCoinShopItems()
        end
    end
end

-- Function to update luck display
local function updateLuckDisplay(luckMultiplier, timeLeft)
    if luckDisplay then
        if luckMultiplier > 1 and timeLeft > 0 then
            local minutes = math.floor(timeLeft / 60)
            local seconds = timeLeft % 60
            luckDisplay.Text = "Current Luck: " .. string.format("%.2f", luckMultiplier) .. "x (" .. minutes .. ":" .. string.format("%02d", seconds) .. ")"
            luckDisplay.BackgroundColor3 = Color3.fromRGB(100, 50, 150) -- Purple for active luck
        else
            luckDisplay.Text = "Current Luck: 1.00x"
            luckDisplay.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Gray for no luck
        end
    end
end

-- Function to update Robux data display
local function updateRobuxDataDisplay(permanentLuckBonus, hasNukeAll)
    -- Store permanent luck bonus globally for shop items to access
    _G.playerPermanentLuckBonus = permanentLuckBonus
    
    -- Update all shop items to reflect ownership status
    if _G.updateAllShopItems then
        _G.updateAllShopItems()
    end
end

-- Listen for coin count updates
coinCountUpdate.OnClientEvent:Connect(updateCoinCount)

-- Listen for luck updates
luckUpdate.OnClientEvent:Connect(updateLuckDisplay)

-- Listen for Robux data updates
local robuxDataUpdate = ReplicatedStorage:FindFirstChild("Remotes"):FindFirstChild("RobuxDataUpdate")
if robuxDataUpdate then
    robuxDataUpdate.OnClientEvent:Connect(updateRobuxDataDisplay)
end

-- Populate shop when switching tabs
local originalSwitchToTab = switchToTab
switchToTab = function(tabName)
    originalSwitchToTab(tabName)
    if tabName == "gamepasses" then
        populateGamepassesItems()
    elseif tabName == "special" then
        populateRobuxShopItems()
    elseif tabName == "coin" then
        populateCoinShopItems()
    end
end

-- Make the script accessible to other scripts
_G.ShopUI = {
    toggleShop = toggleShop
}
